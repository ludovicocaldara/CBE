# Init script
# Source this file in your script after setting the CBE_BASE environment variable.
# For examples about how to use it, see the "skel" file.

. $CBE_BASE/variables.conf
. $CBE_BASE/functions.conf


####################################################################################################
# OUTPUT FUNCTIONS
# For optimal output and logging, avoid using echo and use these instead.
# The output will change according to the verbosity level.
#

# esilent prints output even in silent mode
function esilent  { CBE_PR_VERBOSITY=$CBE_LEVEL_SILENT  F_elog " [SILENT]: $@" ;}
function enotify  { CBE_PR_VERBOSITY=$CBE_LEVEL_NOTIFY  F_elog " [NORMAL]: $@" ;}
function eok      { CBE_PR_VERBOSITY=$CBE_LEVEL_NOTIFY  F_elog "[SUCCESS]: $@" ;}
function ewarn    { CBE_PR_VERBOSITY=$CBE_LEVEL_WARNING F_elog "[WARNING]: $@" ;}
function einfo    { CBE_PR_VERBOSITY=$CBE_LEVEL_INFO    F_elog "   [INFO]: $@" ;}
function edebug   { CBE_PR_VERBOSITY=$CBE_LEVEL_DEBUG   F_elog "  [DEBUG]: $@" ;}
function eerror   { CBE_PR_VERBOSITY=$CBE_LEVEL_ERROR   F_elog "  [ERROR]: $@" ;}
function ecrit    { CBE_PR_VERBOSITY=$CBE_LEVEL_FATAL   F_elog "  [FATAL]: $@" ;}

# edumpvar prints the variables as debug messages. For arrays, each key/value pair is printed
# old version:
# function edumpvar { for var in $@ ; do edebug "$var=${!var}" ; done }
function edumpvar {
	for var in $@ ; do
		declare -p $var 2> /dev/null | grep -q '^declare \-a'
		if [ $? -ne 0 ] ; then
			edebug "$var=${!var}"
		else
			ind=$(echo $var | awk -F\[ '{print $NF}' | awk -F\] '{print $1}' )
			base=$(echo $var | awk -F\[ '{print $1}')
			edebug "declare -a $base"
			[ "a$ind" == "a$base" ] && ind="@" && var=${base}[@]
			if [ "a$ind" == "a@" ] ; then
				ind=0
				for val in ${!var} ; do
					edebug "${base}[$ind]=${val}"
					ind=$(($ind+1))
				done
			else
				edebug "${base}[$ind]=${!var}"
			fi
		fi
	done
}

# F_dumpvar dumps variables in a format so that they can be sourced again
# (e.g. dumping variables in a temp file to use to reproduce a problem)
function F_dumpvar {
	for CBE_PR_VAR in $@ ; do
		declare -p $CBE_PR_VAR
	done
}

# F_elog is the main logging function used internally by the previous functions. It is not meant to be used directly.
function F_elog {
	if [ $CBE_VERBOSITY -ge $CBE_PR_VERBOSITY ]; then
		CBE_PR_DATESTRING=`date "+%Y-%m-%dT%H:%M:%S%z"`
		# Expand escaped characters, wrap at 70 chars, indent wrapped lines
		#echo -e "$CBE_PR_DATESTRING ${CBE_SCRIPT_NAME}[${CBE_SCRIPT_PID}] $@" | fold -w70 -s | sed '2~1s/^/  /' #>&3
		echo -e "$CBE_PR_DATESTRING ${CBE_SCRIPT_NAME}[${CBE_SCRIPT_PID}] $@"
	fi
}

# for each verbose level, create e corresponding _file function that dumps the content of a file correctly formatted
# the resulting functions (eerror_file, edebug_file, etc.) can be used to print the output of a file while keeping a neat logging format
for CBE_PR_LEVEL in silent notify ok warn info debug error crit ; do
	CBE_PR_DEF="function e${CBE_PR_LEVEL}_file {
		e${CBE_PR_LEVEL} Contents of file \${1:-/dev/null} ;
		while read line ; do
		e${CBE_PR_LEVEL} \$line ;
		done <\${1:-/dev/null} ;
}"
	eval $CBE_PR_DEF
done

function F_try {
        CBE_PR_COMMAND=$@
        edebug "Executing the following command:"
        edebug "  \`${CBE_PR_COMMAND}\`"
        _ERRMSG=$( { eval ${CBE_PR_COMMAND} >&3; } 2>&1 )
	CBE_PR_EXITCODE=$?
        return ${CBE_PR_EXITCODE}
}

# F_start_logging must be called by every script when you want to start logging to a file
# If it is not called, the script will work but no log file is generated automatically
function F_start_logging  {
	if [ $CBE_PR_NO_JOB_LOGGING ] ; then
		einfo "Not logging to a logfile because -Z option specified."
	else
		[[ -d $CBE_LOG_DIR/$CBE_JOB_CLASS ]] || mkdir -p $CBE_LOG_DIR/$CBE_JOB_CLASS && chgrp dba $CBE_LOG_DIR/$CBE_JOB_CLASS && chmod 775 $CBE_LOG_DIR/$CBE_JOB_CLASS
		CBE_PR_PIPE=${CBE_LOG_DIR}/$CBE_JOB_CLASS/${CBE_JOB}_${CBE_DATETIME}.pipe
		mkfifo -m 700 $CBE_PR_PIPE
		CBE_LOGFILE=${CBE_LOG_DIR}/$CBE_JOB_CLASS/${CBE_JOB}_${CBE_DATETIME}.log
		exec 3>&1
		tee ${CBE_LOGFILE} <$CBE_PR_PIPE >&3 &
		CBE_PR_TEEPID=$!
		exec 1>$CBE_PR_PIPE
		CBE_PR_PIPE_OPENED=1
		enotify Logging to $CBE_LOGFILE
		enotify `who mom likes`
	fi
}

# F_stop_logging closes the pipe that logs to a logfile.
# Not needed to call it explicitly at the end of the script (unless needed), as the F_cleanup function takes care of it
function F_stop_logging {
	if [ ${CBE_PR_PIPE_OPENED} ] ; then
		exec 1<&3
		sleep 0.2
		ps --pid $CBE_PR_TEEPID >/dev/null
		if [ $? -eq 0 ] ; then
			sleep 1
			kill  $CBE_PR_TEEPID
		fi
		rm $CBE_PR_PIPE
		unset CBE_PR_PIPE_OPENED
	fi
}

# F_common_usage prints the common parameters that are evaluated by the init function.
# Your script must declare a Usage function that is called automatically when -h is passed
# The output of F_common_usage will be appended automatically
function F_common_usage {
	cat <<EOF
	Common Options:
		-e ent	Work with the entity ent rather than the current one.
			(Required for running scripts using the crontab, for example)
		-s	Run the script in silent mode.
		-V	Verbose: include info messages.
		-G	Debug: include all messages.
		-Z	No logging: by default F_start_logging logs to a file.
			With -Z the pipe is not open and no logging is activated
		-R	Service Request (either JIRA issue or SNow code, etc. Defaults to SELF_SERVICE)
		-u	User, defaults to \$(who mom likes | cut -d ' ' -f 1) or USER. It can be overwritten for 3rd party integration
		-h	Displays this help.
EOF
}

# F_parse_global_options parses the option (what a surprise, uh?)
# Your script must define CBE_PARSE_OPTIONS as well
function F_parse_global_options {
	CBE_PR_PARSE_OPTIONS="e:sVGZR:u:h"
	edebug "Start parsing global options"
	# OPTIND is a variable used internally by getopts. do not change its name
	OPTIND=1
	while getopts ":${CBE_PARSE_OPTIONS}${CBE_PR_PARSE_OPTIONS}" CBE_PR_OPT ; do
        case $CBE_PR_OPT in
		e)
                        enotify "-e specified: Setting environment for $OPTARG."
			# will integrate here something according to the platform
			typeset -f F_set_env >/dev/null
			if [ $? -eq 0 ] ; then
				F_set_env $OPTARG
			else
				eerror "Environment $OPTARG requested, but no F_set_env function declared in the init_script.conf. Are you running the default one?"
			fi
			;;
		u)
                        enotify "-u specified: user is $OPTARG."
			CBE_JOBUSER=$OPTARG
			;;
		R)
                        enotify "-R specified: Service Request is $OPTARG."
			CBE_SREQ=$OPTARG
			;;
                s)
			CBE_VERBOSITY=$CBE_LEVEL_SILENT
                        edebug "-s specified: Silent mode"
                        ;;
                V)
			CBE_VERBOSITY=$CBE_LEVEL_INFO
                        edebug "-V specified: Verbose mode"
                        ;;
                G)
			CBE_VERBOSITY=$CBE_LEVEL_DEBUG
                        edebug "-G specified: Debug mode"
                        ;;
		Z)
			CBE_PR_NO_JOB_LOGGING="true"
                        edebug "-Z specified: Not logging to output file"
                        ;;
		h)
                        edebug "-h specified: Print help end exit"
			if [ `typeset -F Usage` ] ; then
				Usage
				F_common_usage
			else
				cat <<EOF
	Usage: $CBE_SCRIPT_NAME [{Common Options}]
EOF
				F_common_usage
			fi
			CBE_PR_FORCE_EXIT=0
                        ;;
                :)
                        eerror "Option -$OPTARG requires an argument."
                        exit 1
                        ;;
        esac
	done
	# reset OPTIND for getopts local parsing
	OPTIND=1
	edebug "End parsing global options"
	if [ $CBE_PR_FORCE_EXIT ] ; then
		exit $CBE_PR_FORCE_EXIT
	fi
}

function F_must_be {
	if [ -n $1 ] ; then
		if [ "$USER" != "$1" ] ; then
			eerror "This script must run as $1."
			exit 1
		fi
	fi
}


function F_must_be_on {
	if [ -n $1 ] ; then
		if [ `hostname -s` != "$1" ] ; then
			eerror "This script can only run on host $1."
			exit 1
		fi
	fi
}

function F_check_warn {
	CBE_PR_EXITCODE=$1
	shift
	if [ $CBE_PR_EXITCODE -eq 0 ] ; then
		eok $@ succeded with exit code $CBE_PR_EXITCODE
	else
		if [ "${_ERRMSG}" ] ; then
			ewarn "STDERR: ${_ERRMSG}"
		fi
		ewarn $@ failed with exit code $CBE_PR_EXITCODE. The script will continue.
	fi
	# return the same code so other checks can follow this one inside the script
	return $CBE_PR_EXITCODE
}

function F_check_exit {
	CBE_PR_EXITCODE=$1
	shift
	if [ $CBE_PR_EXITCODE -eq 0 ] ; then
		eok $@ succeded with exit code $CBE_PR_EXITCODE
	else
		if [ "${_ERRMSG}" ] ; then
			eerror "STDERR: ${_ERRMSG}"
		fi
		eerror $@ failed with exit code $CBE_PR_EXITCODE. The script will exit.
		exit $CBE_PR_EXITCODE
	fi
}


function F_validate_date {
	# check if the format is "####-##-##_##:##:##"
	echo $1 | sed -r "s/^([0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{2}:[0-9]{2}:[0-9]{2}$)/valid:\1/" | grep ^valid >/dev/null
	if [ $? -eq 0 ] ; then
		CBE_PR_DATEYYYY=`echo $1 | cut -c 1-4`
		CBE_PR_DATEMM=`echo $1 | cut -c 6-7`
		CBE_PR_DATEDD=`echo $1 | cut -c 9-10`
		CBE_PR_DATEHH=`echo $1 | cut -c 12-13 | sed 's/^0*//'`
		CBE_PR_DATEMI=`echo $1 | cut -c 15-16 | sed 's/^0*//'`
		CBE_PR_DATESS=`echo $1 | cut -c 18-19 | sed 's/^0*//'`

		[[ $CBE_PR_DATEHH -gt 23 ]] && return 1
		[[ $CBE_PR_DATEMI -gt 59 ]] && return 1
		[[ $CBE_PR_DATESS -gt 59 ]] && return 1

		#CBE_PR_THIRTY_ONE_DAYS='0[1-9]|[12][0--9]|3[01]'
		#CBE_PR_THIRTY_DAYS='0[1-9]|[12][0--9]|30'
		#CBE_PR_TWENTY_EIGHT_DAYS='0[1-9]|1[0-9]|2[0-8]'
		case $CBE_PR_DATEMM in
			01|03|05|07|08|10|12)
				[[ `echo $CBE_PR_DATEDD | sed 's/^0*//'` -le 31 ]] ;;
			04|06|09|11)
				[[ `echo $CBE_PR_DATEDD | sed 's/^0*//'` -le 30 ]] ;;
			02)
				[[ `echo $CBE_PR_DATEDD | sed 's/^0*//'`  -le 28 ]] || (( $CBE_PR_DATEYYYY % 4 == 0 && ( $CBE_PR_DATEYYYY % 100 != 0 || $CBE_PR_DATEYYYY % 400 == 0 ) && $CBE_PR_DATEDD == 29 )) ;;
    			*)
	       		  false ;;
		esac 
		if [ $? -eq 0 ] ; then
			return 0
		else
			return 1
		fi
	else
		return 1
	fi
}

function F_cleanup {
	CBE_PR_EXITCODE=$?
	if [ `typeset -F Cleanup` ] ; then
		edebug "Cleanup function defined. Executing it..."
		Cleanup $CBE_PR_EXITCODE
		edebug "Cleanup function executed with return code $?"
	else
		edebug "No cleanup function defined."
	fi
	if [ -s "$CBE_TMP_LIST" ] ; then
		# temp files have been created. cleaning up
		cat ${CBE_TMP_LIST} | while read CBE_TMPFILE ; do
			CBE_TMPFILE_MODE=`echo $CBE_TMPFILE | awk -F'##' '{print $1}'`
			CBE_TMPFILE_NAME=`echo $CBE_TMPFILE | awk -F'##' '{print $2}'`
			case $CBE_TMPFILE_MODE in
				"NEVER" )
					edebug "Removing tempfile $CBE_TMPFILE_NAME"
					[ -f $CBE_TMPFILE_NAME ] && rm $CBE_TMPFILE_NAME
				;;
				"ALWAYS" )
					einfo "Keeping tempfile for analysis $CBE_TMPFILE_NAME"
				;;
				"ERROR" )
					if [ $CBE_PR_EXITCODE -eq 0 ] ; then
						edebug "Removing tempfile $CBE_TMPFILE_NAME"
						[ -f $CBE_TMPFILE_NAME ] && rm $CBE_TMPFILE_NAME
					else
						einfo "Keeping tempfile for analysis $CBE_TMPFILE_NAME"
					fi
				;;
			esac
		done
	fi
	if [ -f "$CBE_TMP_LIST" ] ; then
		edebug "Removing tempfile $CBE_TMP_LIST"
		rm $CBE_TMP_LIST
	fi

	F_stop_logging
}

function F_join_by { local IFS="$1"; shift; echo "$*"; }

function F_mktemp {
        # creates a SQL tempfile to be used in a script and registers it for deletion
        # first parameter: extension of the file (e.g. ".sql")
        # second parameter: keep benavior.
                # ALWAYS: keep the file in any case (error/success)
                # ERROR: (default) keep the file only if the script exits with EXITCODE != 0
                # NEVER: always throw away the tempfile (ideal for scripts that run frequently)
        CBE_PR_MKTEMP_FILE_NAME=`mktemp --suffix=${1:-".txt"} -p $CBE_LOG_DIR ${CBE_JOB}.XXXXX`
        CBE_PR_MKTEMP_MODE=${2:-ERROR}
        [ ${CBE_PR_MKTEMP_MODE} == "ALWAYS" ] || [ ${CBE_PR_MKTEMP_MODE} == "NEVER" ] || CBE_PR_MKTEMP_MODE="ERROR"
        echo "${CBE_PR_MKTEMP_MODE}##$CBE_PR_MKTEMP_FILE_NAME" >> $CBE_TMP_LIST
        echo $CBE_PR_MKTEMP_FILE_NAME

}

typeset -f F_check_env_set >/dev/null
if [ $? -ne 0 ] ; then
function F_check_env_set {
	enotify "Function F_check_env_set does nothing in the common environment. Overwrite it in platform-specific environment"
}
fi


export CBE_DATE=`date +"%Y%m%d"`
export CBE_DATETIME=`date +"%Y%m%d_%H%M%S"`

####exec 3>&2 # logging stream (file descriptor 3) defaults to STDERR
CBE_VERBOSITY=${CBE_VERBOSITY:-4} # default to show warnings and notify

### verbosity levels
CBE_LEVEL_SILENT=0
CBE_LEVEL_FATAL=1
CBE_LEVEL_ERROR=2
CBE_LEVEL_WARNING=3
CBE_LEVEL_NOTIFY=4
CBE_LEVEL_INFO=5
CBE_LEVEL_DEBUG=6

### Load colors by default
F_colordef

### Get base Job name (name of the script minus eventual .sh)
CBE_SCRIPT_NAME=`basename $0`
CBE_SCRIPT_PID=$$
CBE_SCRIPT_DIR=$(readlink -f $(dirname $0))
CBE_JOB=`basename $0 .sh`
CBE_JOB_CLASS=`basename $0 .sh`


### Register the cleanup function
trap F_cleanup EXIT

### Global options are parsed at the beginning. Contains parameters like debug, verbose, silent...
F_parse_global_options $@

CBE_SREQ=${CBE_SREQ:-SELF_SERVICE}
edebug "Service Request: $CBE_SREQ"

[ -z $CBE_MUSTBE ] || F_must_be $CBE_MUSTBE
[ -z $CBE_MUSTBEON ] || F_must_be_on $CBE_MUSTBEON

if [ -z $CBE_LOG_DIR ] ; then
	eerror "Variable CBE_LOG_DIR not set. Please set it in the script, environment, or in a custom variable file."
	exit 1
fi

# this file will contain the list of tempfiles for the cleanup
CBE_TMP_LIST=$(mktemp --suffix=.tmpfile -p $CBE_LOG_DIR ${CBE_JOB}.XXXXX)
edumpvar CBE_TMP_LIST

if [ "$CBE_JOBUSER" == "required" ] ; then
	# if real_user is not oracle or root, defaults to it
	CBE_PR_REAL_USER=`who mom likes | cut -d ' ' -f 1`
	if [ "$CBE_PR_REAL_USER" != "root" ] && [ "$CBE_PR_REAL_USER" != "oracle" ] && [ "$CBE_PR_REAL_USER" != "grid" ] && [ "$CBE_PR_REAL_USER" != "postgres" ] && [ "$CBE_PR_REAL_USER" != "" ]; then
		CBE_JOBUSER=`echo $CBE_PR_REAL_USER | tr '[A-Z]' '[a-z]'`
	else
		eerror "Cannot get real username. User required! Please specify your username with -u"
		exit 1
	fi
fi

edebug init_script loaded.
